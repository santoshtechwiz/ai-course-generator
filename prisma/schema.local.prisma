generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL_LOCAL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL_LOCAL")
}

model User {
  id                   String                @id @default(cuid())
  name                 String?
  email                String?               @unique
  emailVerified        DateTime?
  image                String?
  isAdmin              Boolean               @default(false)
  userType             String                @default("FREE")
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  language             String?
  isActive             Boolean               @default(true)
  credits              Int                   @default(0)
  creditsUsed          Int                   @default(0)
  currentPlanId        String?
  metadata             Json?
  lastActiveAt         DateTime              @default(now())
  hadPreviousPaidPlan  Boolean               @default(false)
  hasUsedFreePlan      Boolean               @default(false)
  streak               Int                   @default(0)
  longestStreak        Int                   @default(0)
  lastReviewDate       DateTime?
  notificationSettings Json?                 @default("{\"emailDigest\": \"weekly\", \"pushEnabled\": true, \"streakAlerts\": true}")
  accounts             Account[]
  bookmarks            Bookmark[]
  Certificate          Certificate[]
  chapterProgresses    ChapterProgress[]
  chatMessages         ChatMessage[]
  courses              Course[]
  courseProgress       CourseProgress[]
  courseQuizAttempts   CourseQuizAttempt[]
  ratings              CourseRating[]
  EmailQueue           EmailQueue[]
  favorites            Favorite[]
  flashCards           FlashCard[]
  flashCardReviews     FlashCardReview[]
  Leaderboard          Leaderboard[]
  learningEvents       LearningEvent[]
  PendingSubscription  PendingSubscription[]
  PushSubscription     PushSubscription[]
  quizProgress         QuizProgress[]
  recommendations      Recommendation[]
  sessions             Session[]
  SubscriptionEvent    SubscriptionEvent[]
  TokenTransaction     TokenTransaction[]
  UsageLimit           UsageLimit[]
  achievements         UserAchievement[]
  UserBadge            UserBadge[]
  notifications        UserNotification[]
  userQuizzes          UserQuiz[]
  userQuizAttempts     UserQuizAttempt[]
  userQuizFavorites    UserQuizFavorite[]
  userQuizRatings      UserQuizRating[]
  orderingQuizAttempts OrderingQuizAttempt[]
  UserReferral         UserReferral?
  referralsReceived    UserReferralUse[]     @relation("Referred")
  referralsGiven       UserReferralUse[]     @relation("Referrer")
  settings             UserSettings?
  subscription         UserSubscription?
  shares               Share[]

  @@index([email])
  @@index([userType])
  @@index([createdAt])
  @@index([isAdmin])
  @@index([hadPreviousPaidPlan])
  @@index([hasUsedFreePlan])
  @@index([lastReviewDate])
  @@index([streak])
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model Course {
  id                Int               @id @default(autoincrement())
  title             String
  description       String?
  image             String
  userId            String            @map("user_id")
  categoryId        Int?
  isCompleted       Boolean?          @default(false)
  isPublic          Boolean           @default(false)
  isFeatured        Boolean           @default(false)
  slug              String?           @unique
  difficulty        String?
  estimatedHours    Float?
  language          String?
  metadata          Json?
  status            String            @default("DRAFT")
  pricing           Json?
  prerequisitesIds  Int[]
  lastPublishedAt   DateTime?
  startDate         DateTime?
  endDate           DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  generatedBy       String            @default("USER")
  version           Int               @default(1)
  parentId          Int?
  viewCount         Int?              @default(0)
  visibility        String            @default("private")
  share_token       String?           @unique
  share_key_hash    String?
  share_expiry      DateTime?
  share_views       Int               @default(0)
  bookmarks         Bookmark[]
  Certificate       Certificate[]
  chapterProgresses ChapterProgress[]
  category          Category?         @relation(fields: [categoryId], references: [id])
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseProgress    CourseProgress[]
  ratings           CourseRating[]
  courseUnits       CourseUnit[]
  favorites         Favorite[]
  learningEvents    LearningEvent[]
  tags              Tag[]             @relation("CourseTags")

  @@index([title])
  @@index([visibility])
  @@index([share_token])
  @@index([categoryId])
  @@index([userId])
  @@index([isPublic])
  @@index([isFeatured])
  @@index([difficulty])
  @@index([status])
  @@index([startDate])
  @@index([createdAt])
  @@index([lastPublishedAt])
  @@index([slug])
}

model CourseUnit {
  id          Int       @id @default(autoincrement())
  courseId    Int
  name        String    @map("title")
  isCompleted Boolean?  @default(false)
  duration    Int?
  order       Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  version     Int       @default(1)
  parentId    Int?
  generatedBy String    @default("USER")
  chapters    Chapter[]
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([order])
  @@index([isCompleted])
  @@map("CourseUnit")
}

model Chapter {
  id                 Int               @id @default(autoincrement())
  unitId             Int
  title              String
  youtubeSearchQuery String?
  videoId            String?
  transcript         String?
  summary            String?
  videoDuration      Float?
  isFreePreview      Boolean           @default(true)
  isCompleted        Boolean           @default(false)
  summaryStatus      String            @default("PENDING")
  videoStatus        String            @default("PENDING")
  order              Int               @default(0)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  version            Int               @default(1)
  parentId           Int?
  generatedBy        String            @default("USER")
  bookmarks          Bookmark[]
  unit               CourseUnit        @relation(fields: [unitId], references: [id], onDelete: Cascade)
  chapterProgresses  ChapterProgress[]
  courseQuizzes      CourseQuiz[]
  learningEvents     LearningEvent[]

  @@index([unitId])
  @@index([isCompleted])
  @@index([order])
  @@index([videoStatus, summaryStatus])
  @@map("Chapter")
}

model ChapterProgress {
  id             Int      @id @default(autoincrement())
  userId         String
  courseId       Int
  chapterId      Int
  isCompleted    Boolean  @default(false)
  timeSpent      Int      @default(0)
  lastProgress   Float    @default(0)
  lastAccessedAt DateTime @default(now())
  chapter        Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId, chapterId])
  @@index([userId, chapterId])
  @@index([userId, lastAccessedAt])
}

model CourseQuiz {
  id          Int                 @id @default(autoincrement())
  chapterId   Int
  question    String
  answer      String
  options     String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  generatedBy String              @default("USER")
  version     Int                 @default(1)
  parentId    Int?
  chapter     Chapter             @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  attempts    CourseQuizAttempt[]

  @@index([chapterId])
}

model CourseQuizAttempt {
  id           Int               @id @default(autoincrement())
  userId       String
  courseQuizId Int
  score        Int?
  timeSpent    Int?
  improvement  Float?
  accuracy     Float?
  status       QuizAttemptStatus @default(IN_PROGRESS)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  courseQuiz   CourseQuiz        @relation(fields: [courseQuizId], references: [id], onDelete: Cascade)
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseQuizId])
  @@index([userId])
  @@index([courseQuizId])
  @@index([score])
  @@index([accuracy])
  @@index([createdAt])
}

model CourseRating {
  id         Int      @id @default(autoincrement())
  courseId   Int
  userId     String   @map("user_id")
  rating     Int
  reviewText String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@index([courseId])
  @@index([rating])
  @@index([createdAt])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  courses   Course[]

  @@index([name])
}

model CourseProgress {
  id                  Int       @id @default(autoincrement())
  userId              String    @map("user_id")
  courseId            Int
  currentChapterId    Int
  currentUnitId       Int?
  progress            Float     @default(0)
  timeSpent           Int       @default(0)
  isCompleted         Boolean   @default(false)
  completionDate      DateTime?
  quizProgress        Json?
  notes               String?
  chapterProgress     Json?
  lastInteractionType String?
  interactionCount    Int       @default(0)
  engagementScore     Float     @default(0)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  lastAccessedAt      DateTime  @default(now())
  course              Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId], name: "unique_user_course_progress")
  @@index([userId, lastAccessedAt])
  @@index([courseId])
  @@index([progress])
  @@index([isCompleted])
  @@index([engagementScore])
  @@index([timeSpent])
  @@index([currentChapterId])
  @@index([lastAccessedAt])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId], name: "unique_user_course")
  @@index([userId])
  @@index([courseId])
  @@index([createdAt])
}

model UserQuiz {
  id                 Int                 @id @default(autoincrement())
  userId             String              @map("user_id")
  title              String
  quizType           String
  isPublic           Boolean             @default(false)
  slug               String              @unique
  isFavorite         Boolean             @default(false)
  points             Float               @default(0)
  description        String?
  lastAttempted      DateTime?
  bestScore          Int?
  difficulty         String?
  timeStarted        DateTime
  timeEnded          DateTime?
  language           String?
  metadata           Json?
  createdAt          DateTime            @default(now())
  passingScore       Int                 @default(70)
  updatedAt          DateTime            @updatedAt
  generatedBy        String              @default("USER")
  version            Int                 @default(1)
  parentId           Int?
  visibility         String              @default("private")
  share_token        String?             @unique
  share_key_hash     String?
  share_expiry       DateTime?
  share_views        Int                 @default(0)
  flashCards         FlashCard[]
  openEndedQuestions OpenEndedQuestion[]
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  attempts           UserQuizAttempt[]
  userQuizFavorites  UserQuizFavorite[]
  questions          UserQuizQuestion[]
  userQuizRating     UserQuizRating[]
  tags               Tag[]               @relation("QuizTags")

  @@index([userId])
  @@index([title])
  @@index([quizType])
  @@index([isPublic])
  @@index([difficulty])
  @@index([createdAt])
  @@index([bestScore])
  @@index([lastAttempted])
  @@index([slug])
  @@index([isFavorite])
  @@index([visibility])
  @@index([share_token])
}

model UserQuizAttempt {
  id               Int                       @id @default(autoincrement())
  userId           String
  userQuizId       Int
  score            Int?
  timeSpent        Int?
  improvement      Float?
  accuracy         Float?
  deviceInfo       String?
  browserInfo      String?
  completionSpeed  Float?
  difficultyRating Float?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  user             User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userQuiz         UserQuiz                  @relation(fields: [userQuizId], references: [id], onDelete: Cascade)
  attemptQuestions UserQuizAttemptQuestion[]

  @@unique([userId, userQuizId])
  @@index([userId])
  @@index([userQuizId])
  @@index([score])
  @@index([accuracy])
  @@index([createdAt])
  @@index([completionSpeed])
}

model UserQuizQuestion {
  id                Int                       @id @default(autoincrement())
  userQuizId        Int
  question          String
  answer            String
  options           Json?
  questionType      String
  codeSnippet       String?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  generatedBy       String                    @default("USER")
  version           Int                       @default(1)
  parentId          Int?
  openEndedQuestion OpenEndedQuestion?
  attemptQuestions  UserQuizAttemptQuestion[]
  userQuiz          UserQuiz                  @relation(fields: [userQuizId], references: [id], onDelete: Cascade)

  @@index([userQuizId])
  @@index([questionType])
}

model OpenEndedQuestion {
  id                 Int              @id @default(autoincrement())
  questionId         Int              @unique
  userQuizId         Int?
  hints              String
  tags               String?
  difficulty         String
  sampleAnswer       String?
  evaluationCriteria String?
  maxScore           Int?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  question           UserQuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userQuiz           UserQuiz?        @relation(fields: [userQuizId], references: [id], onDelete: Cascade)

  @@index([difficulty])
}

model UserQuizAttemptQuestion {
  id         Int              @id @default(autoincrement())
  attemptId  Int
  questionId Int
  userAnswer String?
  isCorrect  Boolean?
  timeSpent  Int
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  attempt    UserQuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question   UserQuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([attemptId, questionId])
  @@index([attemptId])
  @@index([questionId])
  @@index([isCorrect])
  @@index([timeSpent])
}

model FlashCard {
  id          Int               @id @default(autoincrement())
  question    String
  answer      String
  userId      String
  slug        String?
  userQuizId  Int?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  difficulty  String?
  saved       Boolean           @default(false)
  generatedBy String            @default("USER")
  version     Int               @default(1)
  parentId    Int?
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userQuiz    UserQuiz?         @relation(fields: [userQuizId], references: [id], onDelete: Cascade)
  reviews     FlashCardReview[]
  tags        Tag[]             @relation("FlashCardTags")

  @@index([question])
  @@index([userId])
  @@index([userQuizId])
  @@index([difficulty])
  @@index([saved])
  @@index([createdAt])
  @@index([slug])
}

model FlashCardReview {
  id             Int       @id @default(autoincrement())
  flashCardId    Int
  userId         String
  rating         String
  reviewDate     DateTime  @default(now())
  timeSpent      Int?
  notes          String?
  reviewCount    Int       @default(1)
  nextReviewDate DateTime?
  easeFactor     Decimal   @default(2.5) @db.Decimal(3, 2)
  interval       Int       @default(0)
  flashCard      FlashCard @relation(fields: [flashCardId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([flashCardId])
  @@index([userId])
  @@index([rating])
  @@index([reviewDate])
  @@index([nextReviewDate])
  @@index([userId, flashCardId, nextReviewDate])
  @@index([easeFactor])
  @@index([interval])
}

model QuizProgress {
  id                   Int      @id @default(autoincrement())
  userId               String
  courseId             Int
  chapterId            Int
  currentQuestionIndex Int      @default(0)
  answers              Json?
  timeSpent            Int      @default(0)
  isCompleted          Boolean  @default(false)
  lastUpdated          DateTime @default(now())
  score                Int?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId, chapterId])
  @@index([userId])
  @@index([courseId])
  @@index([isCompleted])
  @@index([lastUpdated])
}

model UserQuizRating {
  id         Int      @id @default(autoincrement())
  userQuizId Int
  userId     String
  rating     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userQuiz   UserQuiz @relation(fields: [userQuizId], references: [id], onDelete: Cascade)

  @@unique([userId, userQuizId])
  @@index([userQuizId])
  @@index([rating])
  @@index([createdAt])
}

model UserQuizFavorite {
  id         Int      @id @default(autoincrement())
  userId     String
  userQuizId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userQuiz   UserQuiz @relation(fields: [userQuizId], references: [id], onDelete: Cascade)

  @@unique([userId, userQuizId])
  @@index([userId])
  @@index([userQuizId])
  @@index([createdAt])
}

model Tag {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
  courses    Course[]    @relation("CourseTags")
  flashcards FlashCard[] @relation("FlashCardTags")
  quizzes    UserQuiz[]  @relation("QuizTags")
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  userId    String
  courseId  Int?
  chapterId Int?
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  course    Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseId])
  @@index([chapterId])
  @@index([createdAt])
}

model Certificate {
  id             Int      @id @default(autoincrement())
  userId         String
  courseId       Int
  issuedAt       DateTime @default(now())
  certificateUrl String?
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseId])
  @@index([issuedAt])
}

model Recommendation {
  id        Int      @id @default(autoincrement())
  userId    String
  type      String
  targetId  String
  reason    String?
  score     Float
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([score])
}

model LearningEvent {
  id        Int      @id @default(autoincrement())
  userId    String
  courseId  Int?
  chapterId Int?
  type      String
  entityId  String?
  progress  Float?
  timeSpent Int?
  metadata  Json?
  createdAt DateTime @default(now())
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  course    Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseId])
  @@index([type])
  @@index([createdAt])
  @@index([userId, courseId, type])
  @@index([userId, courseId, createdAt])
}

model Plan {
  id            String             @id
  name          String
  price         Int
  duration      Int
  features      Json?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  subscriptions UserSubscription[]
}

model UserSubscription {
  id                   String              @id @default(cuid())
  userId               String              @unique
  planId               String
  status               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean             @default(false)
  stripeSubscriptionId String?             @unique
  stripeCustomerId     String?
  stripePriceId        String?
  stripeStatus         String?
  lastStripeEvent      String?
  trialEnd             DateTime?
  canceledAt           DateTime?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  SubscriptionEvent    SubscriptionEvent[]
  plan                 Plan                @relation(fields: [planId], references: [id])
  user                 User                @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([currentPeriodEnd])
  @@index([planId])
  @@index([stripeCustomerId])
  @@index([stripeStatus])
  @@index([canceledAt])
}

model ContactSubmission {
  id              Int      @id @default(autoincrement())
  name            String
  email           String
  message         String
  status          String   @default("NEW")
  adminNotes      String?
  responseMessage String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
}

model PendingSubscription {
  id            String   @id @default(cuid())
  userId        String
  planId        String
  duration      Int
  referralCode  String?
  promoCode     String?
  promoDiscount Float?
  status        String   @default("PENDING")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model UserAchievement {
  id              String   @id @default(cuid())
  userId          String
  achievementType String
  title           String
  description     String?
  earnedAt        DateTime @default(now())
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([achievementType])
  @@index([earnedAt])
}

model UserNotification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([type])
  @@index([createdAt])
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  darkMode           Boolean  @default(false)
  language           String   @default("en")
  timezone           String?
  preferences        Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model TokenTransaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Int
  credits     Int?     @default(0)
  type        String
  description String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model UserReferral {
  id           String            @id @default(cuid())
  userId       String            @unique
  referralCode String            @unique
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now())
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  referralUses UserReferralUse[]

  @@index([referralCode])
}

model UserReferralUse {
  id          String       @id @default(cuid())
  referrerId  String
  referredId  String
  referralId  String
  status      String
  planId      String?
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  referral    UserReferral @relation(fields: [referralId], references: [id], onDelete: Cascade)
  referred    User         @relation("Referred", fields: [referredId], references: [id], onDelete: Cascade)
  referrer    User         @relation("Referrer", fields: [referrerId], references: [id], onDelete: Cascade)

  @@index([referralId])
  @@index([referrerId])
  @@index([referredId])
  @@index([status])
  @@index([createdAt])
}

model Embedding {
  id            String   @id @default(cuid())
  content       String
  embeddingJson Json
  embedding     Json?
  type          String
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([type])
  @@index([createdAt])
  @@index([embedding], type: Gin)
}

model EmbeddingJob {
  id        Int      @id @default(autoincrement())
  status    String   @default("queued")
  payload   Json?
  progress  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([createdAt])
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  userId    String
  sessionId String   @default("default")
  role      String
  content   String
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  count     Int      @default(5)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, sessionId])
  @@index([createdAt])
}

model SubscriptionEvent {
  id                 String            @id @default(cuid())
  userSubscriptionId String?
  userId             String
  previousStatus     String?
  newStatus          String
  reason             String?
  source             String?           @default("SYSTEM")
  stripeEventId      String?           @unique
  metadata           Json?
  effectiveAt        DateTime          @default(now())
  createdAt          DateTime          @default(now())
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userSubscription   UserSubscription? @relation(fields: [userSubscriptionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userSubscriptionId])
  @@index([effectiveAt])
}

model UserTopicProgress {
  id              String   @id @default(cuid())
  userId          String
  topic           String
  correctAnswers  Int      @default(0)
  totalAttempts   Int      @default(0)
  currentStreak   Int      @default(0)
  longestStreak   Int      @default(0)
  averageTime     Float    @default(0)
  difficultyLevel String   @default("MEDIUM")
  masteryScore    Float    @default(0)
  lastAttemptAt   DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, topic])
  @@index([userId])
  @@index([topic])
  @@index([masteryScore])
}

model Badge {
  id            String      @id
  name          String      @unique
  description   String
  category      String
  icon          String
  requiredValue Int
  tier          String      @default("bronze")
  createdAt     DateTime    @default(now())
  UserBadge     UserBadge[]

  @@index([category])
  @@index([tier])
}

model EmailQueue {
  id           String    @id
  userId       String
  type         String
  payload      String
  status       String    @default("pending")
  scheduledFor DateTime
  sentAt       DateTime?
  createdAt    DateTime  @default(now())
  error        String?
  User         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([scheduledFor])
  @@index([status])
  @@index([userId])
}

model Leaderboard {
  id        String   @id
  userId    String
  type      String
  value     Int
  rank      Int?
  updatedAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@index([rank])
  @@index([type, value(sort: Desc)])
  @@index([userId])
}

model PushSubscription {
  id        String   @id
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UsageLimit {
  id           String   @id
  userId       String
  resourceType String
  usedCount    Int      @default(0)
  limitCount   Int
  periodStart  DateTime @default(now())
  periodEnd    DateTime
  updatedAt    DateTime @default(now())
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceType])
  @@index([periodEnd])
  @@index([resourceType])
  @@index([userId])
}

model UserBadge {
  id         String   @id
  userId     String
  badgeId    String
  unlockedAt DateTime @default(now())
  progress   Int      @default(0)
  Badge      Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@index([badgeId])
  @@index([unlockedAt])
  @@index([userId])
}

model Share {
  id           String    @id @default(cuid())
  resourceType String // 'course' or 'quiz'
  resourceId   Int // Course ID or Quiz ID
  creatorId    String // User ID who created the share link
  token        String    @unique @db.VarChar(255)
  keyHash      String? // Hash of the access key (if set)
  expiresAt    DateTime? // null = never expires
  visibility   String    @default("link-only") // 'link-only' or 'public'
  viewCount    Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  creator      User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@unique([resourceType, resourceId, token])
  @@index([token])
  @@index([creatorId])
  @@index([resourceType, resourceId])
  @@index([expiresAt])
  @@index([createdAt])
}

enum GeneratedBy {
  USER
  AI
  ADMIN
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum QuizAttemptStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

// ============================================
// ORDERING QUIZ MODELS
// ============================================

model OrderingQuiz {
  id          Int                    @id @default(autoincrement())
  slug        String                 @unique
  title       String
  description String?
  topic       String?
  difficulty  String                 @default("medium") // easy, medium, hard
  isPublic    Boolean                @default(true)
  createdBy   String?                // User ID of creator
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  questions   OrderingQuizQuestion[]
  attempts    OrderingQuizAttempt[]

  @@index([slug])
  @@index([difficulty])
  @@index([createdAt])
  @@index([isPublic])
}

model OrderingQuizQuestion {
  id               Int                            @id @default(autoincrement())
  orderingQuizId   Int
  title            String
  description      String?
  steps            Json // Array of {id: number, description: string, explanation?: string}
  correctOrder     Json // Array of step IDs in correct order: [0, 1, 2, 3, 4]
  orderIndex       Int // Order of this question in the quiz (1, 2, 3, etc.)
  createdAt        DateTime                       @default(now())
  updatedAt        DateTime                       @updatedAt
  orderingQuiz     OrderingQuiz                   @relation(fields: [orderingQuizId], references: [id], onDelete: Cascade)
  attemptQuestions OrderingQuizAttemptQuestion[]

  @@index([orderingQuizId])
  @@index([orderIndex])
}

model OrderingQuizAttempt {
  id               Int                           @id @default(autoincrement())
  userId           String
  orderingQuizId   Int
  score            Int // Percentage score (0-100)
  correctAnswers   Int // Number of correct answers
  totalQuestions   Int // Total number of questions
  timeSpent        Int // Time in seconds
  completedAt      DateTime                      @default(now())
  createdAt        DateTime                      @default(now())
  updatedAt        DateTime                      @updatedAt
  user             User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderingQuiz     OrderingQuiz                  @relation(fields: [orderingQuizId], references: [id], onDelete: Cascade)
  attemptQuestions OrderingQuizAttemptQuestion[]

  @@index([userId])
  @@index([orderingQuizId])
  @@index([completedAt])
  @@index([score])
}

model OrderingQuizAttemptQuestion {
  id         Int                  @id @default(autoincrement())
  attemptId  Int
  questionId Int
  userAnswer Json // Array of step IDs in user's order: [2, 0, 4, 3, 1]
  isCorrect  Boolean
  timeSpent  Int // Time spent on this question in seconds
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  attempt    OrderingQuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question   OrderingQuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([attemptId, questionId])
  @@index([attemptId])
  @@index([questionId])
  @@index([isCorrect])
}
