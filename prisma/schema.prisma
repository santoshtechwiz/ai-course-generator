generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  credits               Int                    @default(3)
  isAdmin               Boolean                @default(false)
  userType              String                 @default("Free")
  totalCoursesWatched   Int                    @default(0)
  totalQuizzesAttempted Int                    @default(0)
  totalTimeSpent        Int                    @default(0)
  engagementScore       Float                  @default(0)
  streakDays            Int                    @default(0)
  lastStreakDate        DateTime?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  lastLogin             DateTime               @default(now())
  lastActiveAt          DateTime               @default(now())
  accounts              Account[]
  courses               Course[]
  courseProgress        CourseProgress[]
  courseQuizAttempts    CourseQuizAttempt[]
  ratings               CourseRating[]
  favorites             Favorite[]
  flashCards            FlashCard[]
  sessions              Session[]
  engagementMetrics     UserEngagementMetrics?
  userQuizzes           UserQuiz[]
  userQuizAttempts      UserQuizAttempt[]
  userQuizRatings       UserQuizRating[]
  subscription          UserSubscription?
  TokenTransaction      TokenTransaction[]
  UserReferral          UserReferral?
  referralsGiven        UserReferralUse[]      @relation("Referrer")
  referralsReceived     UserReferralUse[]      @relation("Referred")

  @@index([email])
  @@index([userType])
  @@index([engagementScore])
  @@index([lastActiveAt]) // Added for user activity queries
  @@index([createdAt]) // Added for user registration analytics
  @@index([isAdmin]) // Added for admin filtering
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider]) // Added for provider-based queries
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires]) // Added for session cleanup queries
}

model Course {
  id             Int              @id @default(autoincrement())
  title          String          
  description    String?
  image          String
  viewCount      Int              @default(1000)
  userId         String           @map("user_id")
  categoryId     Int?
  isCompleted    Boolean?         @default(false)
  isPublic       Boolean          @default(false)
  slug           String?          @unique
  difficulty     String?
  estimatedHours Float?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  category       Category?        @relation(fields: [categoryId], references: [id])
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseProgress CourseProgress[]
  ratings        CourseRating[]
  courseUnits    CourseUnit[]
  favorites      Favorite[]

  @@index([title])
  @@index([categoryId])
  @@index([userId])
  @@index([isPublic])
  @@index([difficulty])
  @@index([createdAt]) // Added for sorting by newest
  @@index([viewCount]) // Added for popularity sorting
  @@index([slug]) // Added for slug lookups
}

model CourseUnit {
  id          Int       @id @default(autoincrement())
  courseId    Int
  name        String    @map("title")
  isCompleted Boolean?  @default(false)
  duration    Int?
  order       Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  chapters    Chapter[]
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([order]) // Added for ordering queries
  @@index([isCompleted])
  @@map("CourseUnit")
}

model Chapter {
  id                 Int          @id @default(autoincrement())
  unitId             Int
  title              String     
  youtubeSearchQuery String
  videoId            String?
  summary            String?
  isCompleted        Boolean      @default(false)
  summaryStatus      String       @default("PENDING")
  videoStatus        String       @default("PENDING")
  order              Int          @default(0)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  unit               CourseUnit   @relation(fields: [unitId], references: [id], onDelete: Cascade)
  courseQuizzes      CourseQuiz[]

  @@index([unitId])
  @@index([isCompleted])
  @@index([order]) // Added for ordering queries
  @@index([videoStatus, summaryStatus]) // Added for status filtering
  @@map("Chapter")
}

model CourseRating {
  id         Int      @id @default(autoincrement())
  courseId   Int
  userId     String   @map("user_id")
  rating     Int
  reviewText String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@index([courseId])
  @@index([rating])
  @@index([createdAt]) // Added for recent reviews
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]

  @@index([name])
}

model CourseProgress {
  id                  Int       @id @default(autoincrement())
  userId              String    @map("user_id")
  courseId            Int
  currentChapterId    Int
  currentUnitId       Int?
  completedChapters   String
  progress            Float     @default(0)
  timeSpent           Int       @default(0)
  isCompleted         Boolean   @default(false)
  completionDate      DateTime?
  quizProgress        Json?
  notes               String?
  bookmarks           String?
  lastInteractionType String?
  interactionCount    Int       @default(0)
  engagementScore     Float     @default(0)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  lastAccessedAt      DateTime  @default(now())
  course              Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId], name: "unique_user_course_progress")
  @@index([userId, lastAccessedAt])
  @@index([courseId])
  @@index([progress])
  @@index([isCompleted])
  @@index([engagementScore]) // Added for engagement analytics
  @@index([timeSpent]) // Added for time analytics
  @@index([currentChapterId]) // Added for current chapter lookups
}

model UserSubscription {
  id                   String   @id @default(cuid())
  userId               String   @unique
  planId               String
  status               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  stripeSubscriptionId String?  @unique
  stripeCustomerId     String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([currentPeriodEnd])
  @@index([planId]) // Added for plan-based queries
  @@index([stripeCustomerId]) // Added for Stripe customer lookups
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId], name: "unique_user_course")
  @@index([userId])
  @@index([courseId])
  @@index([createdAt]) // Added for recent favorites
}

model TopicCount {
  id        Int      @id @default(autoincrement())
  topic     String   @unique
  count     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([topic])
  @@index([count]) // Added for popularity sorting
  @@map("TopicCount")
}

model CourseQuiz {
  id        Int                 @id @default(autoincrement())
  chapterId Int
  question  String
  answer    String
  options   String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  chapter   Chapter             @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  attempts  CourseQuizAttempt[]

  @@index([chapterId])
}

model CourseQuizAttempt {
  id           Int        @id @default(autoincrement())
  userId       String
  courseQuizId Int
  score        Int?
  timeSpent    Int?
  improvement  Float?
  accuracy     Float?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  courseQuiz   CourseQuiz @relation(fields: [courseQuizId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseQuizId])
  @@index([userId])
  @@index([courseQuizId])
  @@index([score])
  @@index([accuracy])
  @@index([createdAt]) // Added for recent attempts
}

model UserQuiz {
  id             Int                @id @default(autoincrement())
  userId         String             @map("user_id")
  title          String     
  quizType       String
  isPublic       Boolean            @default(false)
  slug           String             @unique
  isFavorite     Boolean            @default(false)
  lastAttempted  DateTime?
  bestScore      Int?
  difficulty     String?
  timeStarted    DateTime
  timeEnded      DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  flashCards     FlashCard[]
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  attempts       UserQuizAttempt[]
  questions      UserQuizQuestion[]
  userQuizRating UserQuizRating[]

  @@index([userId])
  @@index([title])
  @@index([quizType])
  @@index([isPublic])
  @@index([difficulty])
  @@index([createdAt]) // Added for recent quizzes
  @@index([bestScore]) // Added for leaderboard queries
  @@index([lastAttempted]) // Added for recently attempted
  @@index([slug]) // Added for slug lookups
  @@index([isFavorite]) // Added for favorite filtering
}

model UserQuizAttempt {
  id               Int                       @id @default(autoincrement())
  userId           String
  userQuizId       Int
  score            Int?
  timeSpent        Int?
  improvement      Float?
  accuracy         Float?
  deviceInfo       String?
  browserInfo      String?
  completionSpeed  Float?
  difficultyRating Float?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  user             User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userQuiz         UserQuiz                  @relation(fields: [userQuizId], references: [id], onDelete: Cascade)
  attemptQuestions UserQuizAttemptQuestion[]

  @@unique([userId, userQuizId])
  @@index([userId])
  @@index([userQuizId])
  @@index([score])
  @@index([accuracy])
  @@index([createdAt]) // Added for recent attempts
  @@index([completionSpeed]) // Added for speed analytics
}

model UserEngagementMetrics {
  id                   Int      @id @default(autoincrement())
  userId               String   @unique
  totalLoginTime       Int      @default(0)
  averageSessionLength Float    @default(0)
  weeklyActiveMinutes  Int      @default(0)
  monthlyActiveMinutes Int      @default(0)
  completionRate       Float    @default(0)
  lastCalculated       DateTime @default(now())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([completionRate])
  @@index([weeklyActiveMinutes, monthlyActiveMinutes]) // Added for activity analytics
  @@index([lastCalculated]) // Added for recalculation queries
}

model UserQuizQuestion {
  id                Int                       @id @default(autoincrement())
  userQuizId        Int
  question          String
  answer            String
  options           String?
  questionType      String
  codeSnippet       String?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  openEndedQuestion OpenEndedQuestion?
  attemptQuestions  UserQuizAttemptQuestion[]
  userQuiz          UserQuiz                  @relation(fields: [userQuizId], references: [id], onDelete: Cascade)

  @@index([userQuizId])
  @@index([questionType])
}

model OpenEndedQuestion {
  id         Int              @id @default(autoincrement())
  questionId Int              @unique
  hints      String
  difficulty String
  tags       String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  question   UserQuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([difficulty])
  @@index([tags]) // Added for tag-based filtering
}

model UserQuizAttemptQuestion {
  id         Int              @id @default(autoincrement())
  attemptId  Int
  questionId Int
  userAnswer String?
  isCorrect  Boolean?
  timeSpent  Int
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  attempt    UserQuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question   UserQuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([attemptId, questionId])
  @@index([attemptId])
  @@index([questionId])
  @@index([isCorrect])
  @@index([timeSpent]) // Added for time analytics
}

model UserQuizRating {
  id         Int      @id @default(autoincrement())
  userQuizId Int
  userId     String
  rating     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userQuiz   UserQuiz @relation(fields: [userQuizId], references: [id], onDelete: Cascade)

  @@unique([userId, userQuizId])
  @@index([userQuizId])
  @@index([rating])
  @@index([createdAt]) // Added for recent ratings
}

model FlashCard {
  id         Int       @id @default(autoincrement())
  question   String
  answer     String
  userId     String
  slug       String?   @default("default-slug")
  userQuizId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  difficulty String?
  saved      Boolean   @default(false)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userQuiz   UserQuiz? @relation(fields: [userQuizId], references: [id], onDelete: Cascade)

  @@index([question])
  @@index([userId])
  @@index([userQuizId])
  @@index([difficulty])
  @@index([saved]) // Added for saved flashcards filtering
  @@index([createdAt]) // Added for recent flashcards
  @@index([slug]) // Added for slug lookups
}

// Extension tables for future features (without modifying existing tables)
model UserAchievement {
  id             String   @id @default(cuid())
  userId         String
  achievementType String
  title          String
  description    String?
  earnedAt       DateTime @default(now())
  metadata       Json?    // Flexible field for achievement-specific data
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
  @@index([achievementType])
  @@index([earnedAt])
}

model UserNotification {
  id          String   @id @default(cuid())
  userId      String
  type        String
  title       String
  message     String
  isRead      Boolean  @default(false)
  metadata    Json?    // Flexible field for notification-specific data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([isRead])
  @@index([type])
  @@index([createdAt])
}

model CourseTag {
  id        Int           @id @default(autoincrement())
  name      String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  courses   CourseToTag[]

  @@index([name])
}

model CourseToTag {
  id        Int         @id @default(autoincrement())
  courseId  Int
  tagId     Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  tag       CourseTag   @relation(fields: [tagId], references: [id])
  
  @@unique([courseId, tagId])
  @@index([courseId])
  @@index([tagId])
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  darkMode           Boolean  @default(false)
  language           String   @default("en")
  timezone           String?
  preferences        Json?    // Flexible field for user preferences
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([userId])
}

model TokenTransaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Int
  type        String   
  description String?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model UserReferral {
  id            String           @id @default(cuid())
  userId        String           @unique
  referralCode  String           @unique
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  referralUses  UserReferralUse[]
  
  @@index([referralCode])
}

model UserReferralUse {
  id            String       @id @default(cuid())
  referrerId    String
  referredId    String
  referralId    String
  status        String       // PENDING, COMPLETED, CANCELLED
  planId        String?
  completedAt   DateTime?
  createdAt     DateTime     @default(now())
  
  referrer      User         @relation("Referrer", fields: [referrerId], references: [id], onDelete: Cascade)
  referred      User         @relation("Referred", fields: [referredId], references: [id], onDelete: Cascade)
  referral      UserReferral @relation(fields: [referralId], references: [id], onDelete: Cascade)
  
  @@index([referralId])
  @@index([referrerId])
  @@index([referredId])
  @@index([status])
  @@index([createdAt])
}

