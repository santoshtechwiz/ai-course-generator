generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       Int     @id @default(autoincrement())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  isAdmin      Boolean  @default(false)
  lastUsed     DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                    String               @id @default(cuid())
  name                  String?
  email                 String?              @unique
  emailVerified         DateTime?
  image                 String?
  credits               Int                  @default(3)
  isAdmin               Boolean              @default(false)
  userType              String?
  totalCoursesWatched   Int                  @default(0)
  totalQuizzesAttempted Int                  @default(0)
  totalTimeSpent        Int                  @default(0)
  createdAt             DateTime             @default(now())
  lastLogin             DateTime             @default(now())
  courses               Course[]
  courseProgress        CourseProgress[]
  ratings               CourseRating[]
  favorites             Favorite[]
  userQuizzes           UserQuiz[]
  sessions              Session[]
  subscriptions         UserSubscription?
  accounts              Account[]
  courseQuizAttempts    CourseQuizAttempt[]
  userQuizAttempts      UserQuizAttempt[]

  @@index([email])
}

model Favorite {
  id       Int    @id @default(autoincrement())
  userId   String @map("user_id")
  courseId Int
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId], name: "unique_user_course")
  @@index([userId])
  @@index([courseId])
}

model Course {
  id             Int              @id @default(autoincrement())
  name           String
  description    String?
  image          String
  viewCount      Int              @default(0)
  totalRatings   Int              @default(0)
  averageRating  Float            @default(0)
  userId         String           @map("user_id")
  categoryId     Int?
  isCompleted    Boolean?         @default(false)
  isPublic       Boolean          @default(false)
  slug           String?          @unique
  category       Category?        @relation(fields: [categoryId], references: [id])
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  ratings        CourseRating[]
  courseUnits    CourseUnit[]
  favorites      Favorite[]
  courseProgress CourseProgress[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([name])
  @@index([categoryId])
  @@index([userId])
}

model CourseUnit {
  id          Int       @id @default(autoincrement())
  courseId    Int
  name        String
  chapters    Chapter[]
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  isCompleted Boolean?  @default(false)
  duration    Int?

  @@index([courseId])
  @@map("CourseUnit")
}

model Chapter {
  id                 Int          @id @default(autoincrement())
  unitId             Int
  name               String
  youtubeSearchQuery String
  videoId            String?
  summary            String?
  isCompleted        Boolean      @default(false)
  unit               CourseUnit   @relation(fields: [unitId], references: [id], onDelete: Cascade)
  courseQuizzes      CourseQuiz[]
  summaryStatus      String       @default("PENDING")
  videoStatus        String       @default("PENDING")

  @@index([unitId])
  @@map("Chapter")
}

model CourseRating {
  id         Int      @id @default(autoincrement())
  courseId   Int
  userId     String   @map("user_id")
  rating     Int
  reviewText String?
  createdAt  DateTime @default(now())
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([courseId])
  @@map("Course_Rating")
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  courses Course[]
}

model CourseProgress {
  id                Int       @id @default(autoincrement())
  userId            String    @map("user_id")
  courseId          Int
  currentChapterId  Int
  currentUnitId     Int?
  completedChapters String
  progress          Int       @default(0)
  lastAccessedAt    DateTime  @default(now())
  timeSpent         Int       @default(0)
  isCompleted       Boolean   @default(false)
  completionDate    DateTime?
  quizProgress      String?   // JSON field to store quiz progress
  notes             String?   // Added for user notes
  bookmarks         String?   // Added to store bookmarks

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId], name: "unique_user_course_progress")
  @@index([userId, lastAccessedAt])
  @@index([courseId])
}

model UserSubscription {
  id                   String   @id @default(cuid())
  userId               String   @unique @map("user_id")
  user                 User     @relation(fields: [userId], references: [id])
  planId               String
  status               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  stripeSubscriptionId String?  @unique
  stripeCustomerId     String?
}

model TopicCount {
  id    Int    @id @default(autoincrement())
  topic String @unique
  count Int

  @@map("TopicCount")
}

model CourseQuiz {
  id        Int                 @id @default(autoincrement())
  chapterId Int
  question  String
  answer    String
  options   String
  chapter   Chapter             @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  attempts  CourseQuizAttempt[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@index([chapterId])
}

model CourseQuizAttempt {
  id           Int        @id @default(autoincrement())
  userId       String
  courseQuizId Int
  score        Int?
  timeSpent    Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  improvement  Float?
  accuracy     Float?
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseQuiz   CourseQuiz @relation(fields: [courseQuizId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseQuizId])
  @@unique([userId, courseQuizId])
}

model UserQuiz {
  id            Int               @id @default(autoincrement())
  userId        String            @map("user_id")
  timeStarted   DateTime
  topic         String
  timeEnded     DateTime?
  quizType      String
  isPublic      Boolean?          @default(false)
  slug          String            @unique
  isFavorite    Boolean?          @default(false)
  lastAttempted DateTime?
  bestScore     Int?
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions     UserQuizQuestion[]
  attempts      UserQuizAttempt[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([userId])
  @@index([topic])
}

model UserQuizQuestion {
  id                Int                        @id @default(autoincrement())
  userQuizId        Int
  question          String
  answer            String
  options           String?
  questionType      String
  userQuiz          UserQuiz                   @relation(fields: [userQuizId], references: [id], onDelete: Cascade)
  openEndedQuestion OpenEndedQuestion?
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  attemptQuestions  UserQuizAttemptQuestion[]

  @@index([userQuizId])
  @@index([questionType])
}

model OpenEndedQuestion {
  id         Int              @id @default(autoincrement())
  questionId Int              @unique
  question   UserQuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  hints      String
  difficulty String
  tags       String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@index([difficulty])
}

model UserQuizAttempt {
  id               Int                        @id @default(autoincrement())
  userId           String
  userQuizId       Int
  score            Int?
  timeSpent        Int?
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  improvement      Float?
  accuracy         Float?
  user             User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userQuiz         UserQuiz                   @relation(fields: [userQuizId], references: [id], onDelete: Cascade)
  attemptQuestions UserQuizAttemptQuestion[]

  @@index([userId])
  @@index([userQuizId])
  @@unique([userId, userQuizId])
}

model UserQuizAttemptQuestion {
  id          Int               @id @default(autoincrement())
  attemptId   Int
  questionId  Int
  userAnswer  String?
  isCorrect   Boolean?
  timeSpent   Int
  attempt     UserQuizAttempt   @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question    UserQuizQuestion  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([attemptId])
  @@index([questionId])
}

