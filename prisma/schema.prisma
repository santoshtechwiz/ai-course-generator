generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL_LOCAL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL_LOCAL")
}

model User {
  id                  String                @id @default(cuid())
  name                String?
  email               String?               @unique
  emailVerified       DateTime?
  image               String?
  isAdmin             Boolean               @default(false)
  userType            String                @default("FREE")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  language            String?
  isActive            Boolean               @default(true)
  credits             Int                   @default(0)
  creditsUsed         Int                   @default(0)
  currentPlanId       String?
  metadata            Json?
  accounts            Account[]
  bookmarks           Bookmark[]
  Certificate         Certificate[]
  courses             Course[]
  courseProgress      CourseProgress[]
  courseQuizAttempts  CourseQuizAttempt[]
  ratings             CourseRating[]
  favorites           Favorite[]
  flashCards          FlashCard[]
  flashCardReviews    FlashCardReview[]
  PendingSubscription PendingSubscription[]
  quizProgress        QuizProgress[]
  sessions            Session[]
  TokenTransaction    TokenTransaction[]
  achievements        UserAchievement[]
  notifications       UserNotification[]
  userQuizzes         UserQuiz[]
  userQuizAttempts    UserQuizAttempt[]
  userQuizRatings     UserQuizRating[]
  UserReferral        UserReferral?
  referralsReceived   UserReferralUse[]     @relation("Referred")
  referralsGiven      UserReferralUse[]     @relation("Referrer")
  settings            UserSettings?
  subscription        UserSubscription?

  @@index([email])
  @@index([userType])
  @@index([createdAt])
  @@index([isAdmin])
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model Course {
  id               Int              @id @default(autoincrement())
  title            String
  description      String?
  image            String
  userId           String           @map("user_id")
  categoryId       Int?
  isCompleted      Boolean?         @default(false)
  isPublic         Boolean          @default(false)
  isFeatured       Boolean          @default(false)
  slug             String?          @unique
  difficulty       String?
  estimatedHours   Float?
  language         String?
  metadata         Json?
  status           String           @default("DRAFT")
  pricing          Json?
  prerequisitesIds Int[]
  lastPublishedAt  DateTime?
  startDate        DateTime?
  endDate          DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  bookmarks        Bookmark[]
  Certificate      Certificate[]
  category         Category?        @relation(fields: [categoryId], references: [id])
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseProgress   CourseProgress[]
  ratings          CourseRating[]
  courseUnits      CourseUnit[]
  favorites        Favorite[]

  @@index([title])
  @@index([categoryId])
  @@index([userId])
  @@index([isPublic])
  @@index([isFeatured])
  @@index([difficulty])
  @@index([status])
  @@index([startDate])
  @@index([createdAt])
  @@index([lastPublishedAt])
  @@index([slug])
}

model CourseUnit {
  id          Int       @id @default(autoincrement())
  courseId    Int
  name        String    @map("title")
  isCompleted Boolean?  @default(false)
  duration    Int?
  order       Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  chapters    Chapter[]
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([order])
  @@index([isCompleted])
  @@map("CourseUnit")
}

model Chapter {
  id                 Int          @id @default(autoincrement())
  unitId             Int
  title              String
  youtubeSearchQuery String?
  videoId            String?
  summary            String?
  videoDuration      Float?
  isFreePreview      Boolean      @default(true)
  isCompleted        Boolean      @default(false)
  summaryStatus      String       @default("PENDING")
  videoStatus        String       @default("PENDING")
  order              Int          @default(0)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  bookmarks          Bookmark[]
  unit               CourseUnit   @relation(fields: [unitId], references: [id], onDelete: Cascade)
  courseQuizzes      CourseQuiz[]

  @@index([unitId])
  @@index([isCompleted])
  @@index([order])
  @@index([videoStatus, summaryStatus])
  @@map("Chapter")
}

model CourseQuiz {
  id        Int                 @id @default(autoincrement())
  chapterId Int
  question  String
  answer    String
  options   String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  chapter   Chapter             @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  attempts  CourseQuizAttempt[]

  @@index([chapterId])
}

model CourseQuizAttempt {
  id           Int        @id @default(autoincrement())
  userId       String
  courseQuizId Int
  score        Int?
  timeSpent    Int?
  improvement  Float?
  accuracy     Float?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  courseQuiz   CourseQuiz @relation(fields: [courseQuizId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseQuizId])
  @@index([userId])
  @@index([courseQuizId])
  @@index([score])
  @@index([accuracy])
  @@index([createdAt])
}

model CourseRating {
  id         Int      @id @default(autoincrement())
  courseId   Int
  userId     String   @map("user_id")
  rating     Int
  reviewText String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@index([courseId])
  @@index([rating])
  @@index([createdAt])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]

  @@index([name])
}

model CourseProgress {
  id                  Int       @id @default(autoincrement())
  userId              String    @map("user_id")
  courseId            Int
  currentChapterId    Int
  currentUnitId       Int?
  progress            Float     @default(0)
  timeSpent           Int       @default(0)
  isCompleted         Boolean   @default(false)
  completionDate      DateTime?
  quizProgress        Json?
  notes               String?
  chapterProgress     Json?
  lastInteractionType String?
  interactionCount    Int       @default(0)
  engagementScore     Float     @default(0)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  lastAccessedAt      DateTime  @default(now())
  course              Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId], name: "unique_user_course_progress")
  @@index([userId, lastAccessedAt])
  @@index([courseId])
  @@index([progress])
  @@index([isCompleted])
  @@index([engagementScore])
  @@index([timeSpent])
  @@index([currentChapterId])
}

model UserSubscription {
  id                   String    @id @default(cuid())
  userId               String    @unique
  planId               String
  status               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean   @default(false)
  stripeSubscriptionId String?   @unique
  stripeCustomerId     String?
  stripePriceId        String?
  stripeStatus         String?
  lastStripeEvent      String?
  trialEnd             DateTime?
  canceledAt           DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([currentPeriodEnd])
  @@index([planId])
  @@index([stripeCustomerId])
  @@index([stripeStatus])
  @@index([canceledAt])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId], name: "unique_user_course")
  @@index([userId])
  @@index([courseId])
  @@index([createdAt])
}

model UserQuiz {
  id                 Int                 @id @default(autoincrement())
  userId             String              @map("user_id")
  title              String
  quizType           String
  isPublic           Boolean             @default(false)
  slug               String              @unique
  isFavorite         Boolean             @default(false)
  points             Float               @default(0)
  tags               String?
  description        String?
  lastAttempted      DateTime?
  bestScore          Int?
  difficulty         String?
  timeStarted        DateTime
  timeEnded          DateTime?
  language           String?
  metadata           Json?
  createdAt          DateTime            @default(now())
  passingScore       Int                 @default(70)
  updatedAt          DateTime            @updatedAt
  flashCards         FlashCard[]
  openEndedQuestions OpenEndedQuestion[]
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  attempts           UserQuizAttempt[]
  questions          UserQuizQuestion[]
  userQuizRating     UserQuizRating[]

  @@index([userId])
  @@index([title])
  @@index([quizType])
  @@index([isPublic])
  @@index([difficulty])
  @@index([createdAt])
  @@index([bestScore])
  @@index([lastAttempted])
  @@index([slug])
  @@index([isFavorite])
}

model UserQuizAttempt {
  id               Int                       @id @default(autoincrement())
  userId           String
  userQuizId       Int
  score            Int?
  timeSpent        Int?
  improvement      Float?
  accuracy         Float?
  deviceInfo       String?
  browserInfo      String?
  completionSpeed  Float?
  difficultyRating Float?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  user             User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userQuiz         UserQuiz                  @relation(fields: [userQuizId], references: [id], onDelete: Cascade)
  attemptQuestions UserQuizAttemptQuestion[]

  @@unique([userId, userQuizId])
  @@index([userId])
  @@index([userQuizId])
  @@index([score])
  @@index([accuracy])
  @@index([createdAt])
  @@index([completionSpeed])
}

model UserQuizQuestion {
  id                Int                       @id @default(autoincrement())
  userQuizId        Int
  question          String
  answer            String
  options           Json?
  questionType      String
  codeSnippet       String?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  openEndedQuestion OpenEndedQuestion?
  attemptQuestions  UserQuizAttemptQuestion[]
  userQuiz          UserQuiz                  @relation(fields: [userQuizId], references: [id], onDelete: Cascade)

  @@index([userQuizId])
  @@index([questionType])
}

model OpenEndedQuestion {
  id                 Int              @id @default(autoincrement())
  questionId         Int              @unique
  userQuizId         Int?
  hints              String
  difficulty         String
  tags               String
  sampleAnswer       String?
  evaluationCriteria String?
  maxScore           Int?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  question           UserQuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userQuiz           UserQuiz?        @relation(fields: [userQuizId], references: [id], onDelete: Cascade)

  @@index([difficulty])
  @@index([tags])
}

model UserQuizAttemptQuestion {
  id         Int              @id @default(autoincrement())
  attemptId  Int
  questionId Int
  userAnswer String?
  isCorrect  Boolean?
  timeSpent  Int
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  attempt    UserQuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question   UserQuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([attemptId, questionId])
  @@index([attemptId])
  @@index([questionId])
  @@index([isCorrect])
  @@index([timeSpent])
}

model UserQuizRating {
  id         Int      @id @default(autoincrement())
  userQuizId Int
  userId     String
  rating     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userQuiz   UserQuiz @relation(fields: [userQuizId], references: [id], onDelete: Cascade)

  @@unique([userId, userQuizId])
  @@index([userQuizId])
  @@index([rating])
  @@index([createdAt])
}

model FlashCard {
  id         Int               @id @default(autoincrement())
  question   String
  answer     String
  userId     String
  slug       String?
  userQuizId Int?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  difficulty String?
  saved      Boolean           @default(false)
  tags       String?
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userQuiz   UserQuiz?         @relation(fields: [userQuizId], references: [id], onDelete: Cascade)
  reviews    FlashCardReview[]

  @@index([question])
  @@index([userId])
  @@index([userQuizId])
  @@index([difficulty])
  @@index([saved])
  @@index([createdAt])
  @@index([slug])
  @@index([tags])
}

model FlashCardReview {
  id             Int       @id @default(autoincrement())
  flashCardId    Int
  userId         String
  rating         String
  reviewDate     DateTime  @default(now())
  timeSpent      Int?
  notes          String?
  reviewCount    Int       @default(1)
  nextReviewDate DateTime?
  flashCard      FlashCard @relation(fields: [flashCardId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([flashCardId])
  @@index([userId])
  @@index([rating])
  @@index([reviewDate])
  @@index([nextReviewDate])
}

model QuizProgress {
  id                   Int      @id @default(autoincrement())
  userId               String
  courseId             Int
  chapterId            Int
  currentQuestionIndex Int      @default(0)
  answers              Json?
  timeSpent            Int      @default(0)
  isCompleted          Boolean  @default(false)
  lastUpdated          DateTime @default(now())
  score                Int?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId, chapterId])
  @@index([userId])
  @@index([courseId])
  @@index([isCompleted])
  @@index([lastUpdated])
}

model UserAchievement {
  id              String   @id @default(cuid())
  userId          String
  achievementType String
  title           String
  description     String?
  earnedAt        DateTime @default(now())
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([achievementType])
  @@index([earnedAt])
}

model UserNotification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([type])
  @@index([createdAt])
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  darkMode           Boolean  @default(false)
  language           String   @default("en")
  timezone           String?
  preferences        Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model TokenTransaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Int
  credits     Int?     @default(0)
  type        String
  description String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model UserReferral {
  id           String            @id @default(cuid())
  userId       String            @unique
  referralCode String            @unique
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  referralUses UserReferralUse[]

  @@index([referralCode])
}

model UserReferralUse {
  id          String       @id @default(cuid())
  referrerId  String
  referredId  String
  referralId  String
  status      String
  planId      String?
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  referral    UserReferral @relation(fields: [referralId], references: [id], onDelete: Cascade)
  referred    User         @relation("Referred", fields: [referredId], references: [id], onDelete: Cascade)
  referrer    User         @relation("Referrer", fields: [referrerId], references: [id], onDelete: Cascade)

  @@index([referralId])
  @@index([referrerId])
  @@index([referredId])
  @@index([status])
  @@index([createdAt])
}

model ContactSubmission {
  id              Int      @id @default(autoincrement())
  name            String
  email           String
  message         String
  status          String   @default("NEW")
  adminNotes      String?
  responseMessage String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model PendingSubscription {
  id            String   @id @default(cuid())
  userId        String
  planId        String
  duration      Int
  referralCode  String?
  promoCode     String?
  promoDiscount Float?
  status        String   @default("PENDING")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  userId    String
  courseId  Int?
  chapterId Int?
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  course    Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseId])
  @@index([chapterId])
  @@index([createdAt])
}

model Certificate {
  id             Int      @id @default(autoincrement())
  userId         String
  courseId       Int
  issuedAt       DateTime @default(now())
  certificateUrl String?
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseId])
  @@index([issuedAt])
}
