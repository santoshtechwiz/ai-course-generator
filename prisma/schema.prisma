generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(cuid())
  name                  String?
  email                 String?                 @unique
  emailVerified         DateTime?
  image                 String?
  credits               Int                     @default(3)
  isAdmin               Boolean                 @default(false)
  userType              String                  @default("Free")
  totalCoursesWatched   Int                     @default(0)
  totalQuizzesAttempted Int                     @default(0)
  totalTimeSpent        Int                     @default(0)
  engagementScore       Float                   @default(0)
  streakDays            Int                     @default(0)
  lastStreakDate        DateTime?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  lastLogin             DateTime                @default(now())
  lastActiveAt          DateTime                @default(now())

  accounts           Account[]
  sessions           Session[]
  courses            Course[]
  courseProgress     CourseProgress[]
  ratings            CourseRating[]
  favorites          Favorite[]
  userQuizzes        UserQuiz[]
  subscription       UserSubscription?
  courseQuizAttempts CourseQuizAttempt[]
  userQuizAttempts   UserQuizAttempt[]
  engagementMetrics  UserEngagementMetrics?
  userQuizRatings    UserQuizRating[]

  @@index([email])
  @@index([userType])
  @@index([engagementScore])
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Course {
  id             Int      @id @default(autoincrement())
  name           String
  description    String?
  image          String
  viewCount      Int      @default(1000)
  userId         String   @map("user_id")
  categoryId     Int?
  isCompleted    Boolean? @default(false)
  isPublic       Boolean  @default(false)
  slug           String?  @unique
  difficulty     String?
  estimatedHours Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  category       Category?        @relation(fields: [categoryId], references: [id])
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  ratings        CourseRating[]
  courseUnits    CourseUnit[]
  favorites      Favorite[]
  courseProgress CourseProgress[]

  @@index([name])
  @@index([categoryId])
  @@index([userId])
  @@index([isPublic])
  @@index([difficulty])
}

model CourseUnit {
  id          Int       @id @default(autoincrement())
  courseId    Int
  name        String
  isCompleted Boolean?  @default(false)
  duration    Int?
  order       Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapters Chapter[]

  @@index([courseId])
  @@map("CourseUnit")
}

model Chapter {
  id                 Int          @id @default(autoincrement())
  unitId             Int
  name               String
  youtubeSearchQuery String
  videoId            String?
  summary            String?
  isCompleted        Boolean      @default(false)
  summaryStatus      String       @default("PENDING")
  videoStatus        String       @default("PENDING")
  order              Int          @default(0)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  unit         CourseUnit   @relation(fields: [unitId], references: [id], onDelete: Cascade)
  courseQuizzes CourseQuiz[]

  @@index([unitId])
  @@index([isCompleted])
  @@map("Chapter")
}

model CourseRating {
  id         Int      @id @default(autoincrement())
  courseId   Int
  userId     String   @map("user_id")
  rating     Int
  reviewText String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@index([courseId])
  @@index([rating])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses Course[]

  @@index([name])
}

model CourseProgress {
  id                  Int       @id @default(autoincrement())
  userId              String    @map("user_id")
  courseId            Int
  currentChapterId    Int
  currentUnitId       Int?
  completedChapters   String
  progress            Float     @default(0)
  timeSpent           Int       @default(0)
  isCompleted         Boolean   @default(false)
  completionDate      DateTime?
  quizProgress        Json?
  notes               String?
  bookmarks           String?
  lastInteractionType String?
  interactionCount    Int       @default(0)
  engagementScore     Float     @default(0)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  lastAccessedAt      DateTime  @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId], name: "unique_user_course_progress")
  @@index([userId, lastAccessedAt])
  @@index([courseId])
  @@index([progress])
  @@index([isCompleted])
}

model UserSubscription {
  id                   String   @id @default(cuid())
  userId               String   @unique
  planId               String
  status               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  stripeSubscriptionId String?  @unique
  stripeCustomerId     String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([currentPeriodEnd])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId], name: "unique_user_course")
  @@index([userId])
  @@index([courseId])
}

model TopicCount {
  id        Int      @id @default(autoincrement())
  topic     String   @unique
  count     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([topic])
  @@map("TopicCount")
}

model CourseQuiz {
  id        Int                 @id @default(autoincrement())
  chapterId Int
  question  String
  answer    String
  options   String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  chapter  Chapter             @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  attempts CourseQuizAttempt[]

  @@index([chapterId])
}

model CourseQuizAttempt {
  id           Int        @id @default(autoincrement())
  userId       String
  courseQuizId Int
  score        Int?
  timeSpent    Int?
  improvement  Float?
  accuracy     Float?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseQuiz CourseQuiz @relation(fields: [courseQuizId], references: [id], onDelete: Cascade)

  @@unique([userId, courseQuizId])
  @@index([userId])
  @@index([courseQuizId])
  @@index([score])
  @@index([accuracy])
}

model UserQuiz {
  id            Int                @id @default(autoincrement())
  userId        String             @map("user_id")
  topic         String
  quizType      String
  isPublic      Boolean            @default(false)
  slug          String             @unique
  isFavorite    Boolean            @default(false)
  lastAttempted DateTime?
  bestScore     Int?
  difficulty    String?
  timeStarted   DateTime
  timeEnded     DateTime?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions      UserQuizQuestion[]
  attempts       UserQuizAttempt[]
  userQuizRating UserQuizRating[]

  @@index([userId])
  @@index([topic])
  @@index([quizType])
  @@index([isPublic])
  @@index([difficulty])
}

model UserQuizAttempt {
  id               Int                       @id @default(autoincrement())
  userId           String
  userQuizId       Int
  score            Int?
  timeSpent        Int?
  improvement      Float?
  accuracy         Float?
  deviceInfo       String?
  browserInfo      String?
  completionSpeed  Float?
  difficultyRating Float?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt

  user             User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userQuiz         UserQuiz                  @relation(fields: [userQuizId], references: [id], onDelete: Cascade)
  attemptQuestions UserQuizAttemptQuestion[]

  @@unique([userId, userQuizId])
  @@index([userId])
  @@index([userQuizId])
  @@index([score])
  @@index([accuracy])
}

model UserEngagementMetrics {
  id                   Int      @id @default(autoincrement())
  userId               String   @unique
  totalLoginTime       Int      @default(0)
  averageSessionLength Float    @default(0)
  weeklyActiveMinutes  Int      @default(0)
  monthlyActiveMinutes Int      @default(0)
  completionRate       Float    @default(0)
  lastCalculated       DateTime @default(now())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([completionRate])
}

model UserQuizQuestion {
  id                Int                       @id @default(autoincrement())
  userQuizId        Int
  question          String
  answer            String
  options           String?
  questionType      String
  codeSnippet       String?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt

  userQuiz          UserQuiz                  @relation(fields: [userQuizId], references: [id], onDelete: Cascade)
  openEndedQuestion OpenEndedQuestion?
  attemptQuestions  UserQuizAttemptQuestion[]

  @@index([userQuizId])
  @@index([questionType])
}

model OpenEndedQuestion {
  id         Int              @id @default(autoincrement())
  questionId Int              @unique
  hints      String
  difficulty String
  tags       String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  question UserQuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([difficulty])
}

model UserQuizAttemptQuestion {
  id         Int              @id @default(autoincrement())
  attemptId  Int
  questionId Int
  userAnswer String?
  isCorrect  Boolean?
  timeSpent  Int
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  attempt  UserQuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question UserQuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([attemptId, questionId])
  @@index([attemptId])
  @@index([questionId])
  @@index([isCorrect])
}

model UserQuizRating {
  id         Int      @id @default(autoincrement())
  userQuizId Int
  userId     String
  rating     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userQuiz UserQuiz @relation(fields: [userQuizId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, userQuizId])
  @@index([userQuizId])
  @@index([rating])
}