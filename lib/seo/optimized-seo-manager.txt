/**
 * Optimized SEO Manager - Enhanced version of existing SEO components
 * Maintains all existing functionality while adding improvements and optimizations
 */

import React from 'react';
import { Metadata } from 'next';
import { defaultSiteInfo, defaultFAQItems, defaultSocialProfiles, BASE_URL } from './config';
import type {
  CombinedSchemaProps,
  CourseSchemaProps,
  FAQProps,
  JsonLdProps,
  BreadcrumbListProps,
  OrganizationProps,
  FaqItem,
  QuizSchemaProps,
  SiteInfo,
  MetadataOptions,
} from './types';

// ============================================================================
// OPTIMIZED CORE COMPONENTS (Enhanced versions of existing components)
// ============================================================================

/**
 * Enhanced JsonLD component with performance optimizations
 * Maintains existing API while adding memoization and error handling
 */
export const JsonLD = React.memo(function JsonLD({ type, data = {}, scriptProps }: JsonLdProps) {
  const schema = React.useMemo(() => ({
    '@context': 'https://schema.org',
    '@type': type.charAt(0).toUpperCase() + type.slice(1),
    ...data,
  }), [type, data]);

  const jsonString = React.useMemo(() => {
    try {
      return JSON.stringify(schema, null, 0); // Minified for production
    } catch (error) {
      console.warn('SEO: Failed to serialize schema data', error);
      return '{}';
    }
  }, [schema]);

  return (
    <script
      type="application/ld+json"
      dangerouslySetInnerHTML={{ __html: jsonString }}
      {...scriptProps}
    />
  );
});

/**
 * Enhanced WebsiteSchema with additional SEO features
 * Maintains existing props while adding search functionality and performance optimizations
 */
export interface OptimizedWebsiteSchemaProps {
  siteName?: string;
  siteUrl?: string;
  logoUrl?: string;
  description?: string;
  searchUrl?: string;
  potentialActions?: Array<{
    type: string;
    target: string;
    queryInput?: string;
  }>;
}

export const WebsiteSchema = React.memo(function WebsiteSchema({
  siteName = defaultSiteInfo.name,
  siteUrl = defaultSiteInfo.url,
  logoUrl = defaultSiteInfo.logoUrl,
  description = 'AI-powered coding education platform with interactive courses, quizzes, and learning tools',
  searchUrl,
  potentialActions,
}: OptimizedWebsiteSchemaProps) {
  const schema = React.useMemo(() => {
    const baseSchema = {
      '@context': 'https://schema.org',
      '@type': 'WebSite',
      '@id': `${siteUrl}/#website`,
      url: siteUrl,
      name: siteName,
      description,
      publisher: {
        '@type': 'Organization',
        name: siteName,
        logo: {
          '@type': 'ImageObject',
          url: logoUrl,
          width: 112,
          height: 112,
        },
      },
    };

    // Add search functionality
    if (searchUrl || !potentialActions) {
      baseSchema.potentialAction = {
        '@type': 'SearchAction',
        target: searchUrl || `${siteUrl}/search?q={search_term_string}`,
        'query-input': 'required name=search_term_string',
      };
    } else if (potentialActions?.length > 0) {
      baseSchema.potentialAction = potentialActions.map(action => ({
        '@type': action.type,
        target: action.target,
        ...(action.queryInput && { 'query-input': action.queryInput }),
      }));
    }

    return baseSchema;
  }, [siteName, siteUrl, logoUrl, description, searchUrl, potentialActions]);

  return <JsonLD type="WebSite" data={schema} />;
});

/**
 * Enhanced BreadcrumbListSchema with automatic path generation
 * Maintains existing functionality while adding smart defaults and optimizations
 */
export interface OptimizedBreadcrumbListSchemaProps extends BreadcrumbListProps {
  siteUrl?: string;
  autoGenerate?: boolean;
  currentPath?: string;
  customLabels?: Record<string, string>;
}

export const BreadcrumbListSchema = React.memo(function BreadcrumbListSchema({
  items,
  siteUrl = defaultSiteInfo.url,
  autoGenerate = false,
  currentPath,
  customLabels = {},
}: OptimizedBreadcrumbListSchemaProps) {
  const breadcrumbItems = React.useMemo(() => {
    if (items && items.length > 0) {
      return items;
    }

    if (autoGenerate && currentPath) {
      const segments = currentPath.replace(/^\/+|\/+$/g, '').split('/').filter(Boolean);
      const generatedItems = [{ position: 1, name: 'Home', url: '/' }];
      
      let currentUrl = '';
      segments.forEach((segment, index) => {
        currentUrl += `/${segment}`;
        const name = customLabels[segment] || segment
          .split('-')
          .map(word => word.charAt(0).toUpperCase() + word.slice(1))
          .join(' ');
        
        generatedItems.push({
          position: index + 2,
          name,
          url: currentUrl,
        });
      });
      
      return generatedItems;
    }

    // Default fallback items
    return [
      { position: 1, name: 'Home', url: '/' },
      { position: 2, name: 'Courses', url: '/courses' },
      { position: 3, name: 'About', url: '/about' },
    ];
  }, [items, autoGenerate, currentPath, customLabels]);

  const schema = React.useMemo(() => ({
    '@context': 'https://schema.org',
    '@type': 'BreadcrumbList',
    itemListElement: breadcrumbItems.map((item) => ({
      '@type': 'ListItem',
      position: item.position,
      name: item.name,
      item: item.url.startsWith('http') 
        ? item.url 
        : `${siteUrl}${item.url.startsWith('/') ? item.url : '/' + item.url}`,
    })),
  }), [breadcrumbItems, siteUrl]);

  return <JsonLD type="BreadcrumbList" data={schema} />;
});

/**
 * Enhanced OrganizationSchema with comprehensive business information
 * Maintains existing props while adding more structured data options
 */
export interface OptimizedOrganizationSchemaProps extends OrganizationProps {
  logoUrl?: string;
  email?: string;
  telephone?: string;
  address?: Record<string, any>;
  businessHours?: Array<{
    dayOfWeek: string;
    opens: string;
    closes: string;
  }>;
  services?: string[];
  areaServed?: string | string[];
}

export const OrganizationSchema = React.memo(function OrganizationSchema({
  name = defaultSiteInfo.name,
  url = defaultSiteInfo.url,
  logoUrl = defaultSiteInfo.logoUrl,
  description = 'AI-powered coding education platform with interactive courses, quizzes, and learning tools',
  foundingDate = '2023-01-01',
  sameAs = defaultSocialProfiles,
  email = 'support@courseai.io',
  telephone,
  address,
  businessHours,
  services,
  areaServed,
}: OptimizedOrganizationSchemaProps) {
  const schema = React.useMemo(() => {
    const baseSchema = {
      '@context': 'https://schema.org',
      '@type': 'Organization',
      '@id': `${url}/#organization`,
      name,
      url,
      logo: {
        '@type': 'ImageObject',
        url: logoUrl,
        width: 112,
        height: 112,
      },
      description,
      foundingDate,
      ...(sameAs && sameAs.length > 0 && { sameAs }),
      contactPoint: {
        '@type': 'ContactPoint',
        contactType: 'customer support',
        email,
        ...(telephone && { telephone }),
        url: `${url}/contact`,
      },
    };

    // Add optional structured data
    if (address) {
      baseSchema.address = {
        '@type': 'PostalAddress',
        ...address,
      };
    }

    if (businessHours && businessHours.length > 0) {
      baseSchema.openingHoursSpecification = businessHours.map(hours => ({
        '@type': 'OpeningHoursSpecification',
        dayOfWeek: hours.dayOfWeek,
        opens: hours.opens,
        closes: hours.closes,
      }));
    }

    if (services && services.length > 0) {
      baseSchema.hasOfferCatalog = {
        '@type': 'OfferCatalog',
        name: 'Educational Services',
        itemListElement: services.map((service, index) => ({
          '@type': 'Offer',
          itemOffered: {
            '@type': 'Service',
            name: service,
          },
        })),
      };
    }

    if (areaServed) {
      baseSchema.areaServed = Array.isArray(areaServed) 
        ? areaServed.map(area => ({ '@type': 'Place', name: area }))
        : { '@type': 'Place', name: areaServed };
    }

    return baseSchema;
  }, [name, url, logoUrl, description, foundingDate, sameAs, email, telephone, address, businessHours, services, areaServed]);

  return <JsonLD type="Organization" data={schema} />;
});

/**
 * Enhanced FAQSchema with validation and optimization
 * Maintains existing functionality while adding data validation
 */
export const FAQSchema = React.memo(function FAQSchema({ items = [] }: FAQProps) {
  const validItems = React.useMemo(() => {
    return items.filter((item: FaqItem) => 
      item && 
      typeof item.question === 'string' && 
      typeof item.answer === 'string' &&
      item.question.trim().length > 0 &&
      item.answer.trim().length > 0
    );
  }, [items]);

  const schema = React.useMemo(() => ({
    '@context': 'https://schema.org',
    '@type': 'FAQPage',
    mainEntity: validItems.map((item: FaqItem) => ({
      '@type': 'Question',
      name: item.question.trim(),
      acceptedAnswer: {
        '@type': 'Answer',
        text: item.answer.trim(),
      },
    })),
  }), [validItems]);

  if (validItems.length === 0) {
    return null;
  }

  return <JsonLD type="FAQPage" data={schema} />;
});

/**
 * Enhanced CourseSchema with comprehensive course information
 * Maintains existing props while adding more educational metadata
 */
export interface OptimizedCourseSchemaProps extends CourseSchemaProps {
  difficulty?: 'Beginner' | 'Intermediate' | 'Advanced';
  duration?: string;
  prerequisites?: string[];
  learningOutcomes?: string[];
  category?: string;
  language?: string;
  price?: number;
  currency?: string;
  rating?: {
    value: number;
    count: number;
  };
}

export const CourseSchema = React.memo(function CourseSchema({
  courseName,
  courseUrl,
  description,
  provider = 'CourseAI',
  providerUrl = 'https://courseai.io',
  imageUrl,
  dateCreated = new Date().toISOString(),
  dateModified = new Date().toISOString(),
  authorName,
  authorUrl,
  difficulty,
  duration,
  prerequisites,
  learningOutcomes,
  category,
  language = 'en',
  price,
  currency = 'USD',
  rating,
}: OptimizedCourseSchemaProps) {
  const schema = React.useMemo(() => {
    const baseSchema = {
      '@context': 'https://schema.org',
      '@type': 'Course',
      name: courseName,
      description,
      url: courseUrl,
      provider: {
        '@type': 'Organization',
        name: provider,
        sameAs: providerUrl,
      },
      dateCreated,
      dateModified,
      inLanguage: language,
    };

    // Add optional fields
    if (imageUrl) baseSchema.image = imageUrl;
    if (difficulty) baseSchema.educationalLevel = difficulty;
    if (duration) baseSchema.timeRequired = duration;
    if (category) {
      baseSchema.about = {
        '@type': 'Thing',
        name: category,
      };
    }

    if (authorName) {
      baseSchema.author = {
        '@type': 'Person',
        name: authorName,
        ...(authorUrl && { url: authorUrl }),
      };
    }

    if (prerequisites && prerequisites.length > 0) {
      baseSchema.coursePrerequisites = prerequisites.map(prereq => ({
        '@type': 'AlignmentObject',
        alignmentType: 'prerequisite',
        targetName: prereq,
      }));
    }

    if (learningOutcomes && learningOutcomes.length > 0) {
      baseSchema.teaches = learningOutcomes;
    }

    if (typeof price === 'number') {
      baseSchema.offers = {
        '@type': 'Offer',
        price: price.toString(),
        priceCurrency: currency,
        availability: 'https://schema.org/InStock',
      };
    }

    if (rating && rating.value && rating.count) {
      baseSchema.aggregateRating = {
        '@type': 'AggregateRating',
        ratingValue: rating.value,
        reviewCount: rating.count,
        bestRating: 5,
        worstRating: 1,
      };
    }

    return baseSchema;
  }, [courseName, courseUrl, description, provider, providerUrl, imageUrl, dateCreated, dateModified, authorName, authorUrl, difficulty, duration, prerequisites, learningOutcomes, category, language, price, currency, rating]);

  return <JsonLD type="Course" data={schema} />;
});

/**
 * Enhanced QuizSchema with detailed quiz metadata
 * Maintains existing functionality while adding educational alignment
 */
export interface OptimizedQuizSchemaProps extends QuizSchemaProps {
  difficulty?: string;
  timeRequired?: string;
  educationalUse?: string;
  learningResourceType?: string;
  creator?: {
    name: string;
    url?: string;
  };
  dateCreated?: string;
  dateModified?: string;
  category?: string;
}

export const QuizSchema = React.memo(function QuizSchema({
  name,
  url: quizUrl,
  description,
  questions,
  numberOfQuestions,
  difficulty,
  timeRequired,
  educationalUse = 'Assessment',
  learningResourceType = 'Quiz',
  creator,
  dateCreated,
  dateModified,
  category,
}: OptimizedQuizSchemaProps) {
  const schema = React.useMemo(() => {
    const baseSchema = {
      '@context': 'https://schema.org',
      '@type': 'Quiz',
      name,
      description,
      url: quizUrl,
      numberOfQuestions: numberOfQuestions || questions?.length || 0,
      educationalUse,
      learningResourceType,
    };

    // Add optional fields
    if (difficulty) baseSchema.educationalLevel = difficulty;
    if (timeRequired) baseSchema.timeRequired = timeRequired;
    if (dateCreated) baseSchema.dateCreated = dateCreated;
    if (dateModified) baseSchema.dateModified = dateModified;
    
    if (creator) {
      baseSchema.creator = {
        '@type': 'Person',
        name: creator.name,
        ...(creator.url && { url: creator.url }),
      };
    }

    if (category) {
      baseSchema.about = {
        '@type': 'Thing',
        name: category,
      };
    }

    if (questions && Array.isArray(questions) && questions.length > 0) {
      baseSchema.mainEntity = questions.map((question: { question: string; answer: string }) => ({
        '@type': 'Question',
        name: question.question,
        acceptedAnswer: {
          '@type': 'Answer',
          text: question.answer,
        },
      }));
    }

    return baseSchema;
  }, [name, quizUrl, description, questions, numberOfQuestions, difficulty, timeRequired, educationalUse, learningResourceType, creator, dateCreated, dateModified, category]);

  return <JsonLD type="Quiz" data={schema} />;
});

/**
 * Enhanced DefaultSEO component with comprehensive SEO setup
 * Maintains existing functionality while adding performance optimizations
 */
export interface OptimizedDefaultSEOProps extends CombinedSchemaProps {
  enableWebsite?: boolean;
  enableBreadcrumbs?: boolean;
  enableOrganization?: boolean;
  enableFAQ?: boolean;
  currentPath?: string;
  customBreadcrumbLabels?: Record<string, string>;
}

export const DefaultSEO = React.memo(function DefaultSEO({
  siteInfo = defaultSiteInfo,
  organization,
  faqItems,
  includeFAQ,
  enableWebsite = true,
  enableBreadcrumbs = true,
  enableOrganization = true,
  enableFAQ = true,
  currentPath,
  customBreadcrumbLabels,
}: OptimizedDefaultSEOProps) {
  const orgProps = React.useMemo(() => 
    organization && typeof organization === 'object' ? organization : {},
    [organization]
  );
  
  const faqs = React.useMemo(() => 
    Array.isArray(faqItems) ? faqItems : defaultFAQItems,
    [faqItems]
  );

  return (
    <>
      {enableWebsite && (
        <WebsiteSchema
          siteName={siteInfo.name}
          siteUrl={siteInfo.url}
          logoUrl={siteInfo.logoUrl}
        />
      )}
      {enableBreadcrumbs && (
        <BreadcrumbListSchema 
          siteUrl={siteInfo.url}
          autoGenerate={!!currentPath}
          currentPath={currentPath}
          customLabels={customBreadcrumbLabels}
        />
      )}
      {enableOrganization && <OrganizationSchema {...orgProps} />}
      {enableFAQ && (includeFAQ || faqs.length > 0) && <FAQSchema items={faqs} />}
    </>
  );
});

// ============================================================================
// ENHANCED UTILITY FUNCTIONS (Optimized versions of existing utilities)
// ============================================================================

/**
 * Enhanced metadata generation with comprehensive SEO options
 * Maintains existing API while adding more customization options
 */
export interface OptimizedMetadataOptions extends MetadataOptions {
  siteName?: string;
  locale?: string;
  alternateLocales?: string[];
  robots?: {
    index?: boolean;
    follow?: boolean;
    noarchive?: boolean;
    nosnippet?: boolean;
    noimageindex?: boolean;
    nocache?: boolean;
  };
  verification?: {
    google?: string;
    bing?: string;
    yandex?: string;
    pinterest?: string;
  };
  manifest?: string;
  themeColor?: string;
  colorScheme?: 'light' | 'dark' | 'light dark';
}

export function generateOptimizedMetadata(options: OptimizedMetadataOptions): Metadata {
  const {
    title,
    description,
    canonicalPath,
    path,
    ogImage,
    ogType = 'website',
    noIndex = false,
    keywords = [],
    siteName = defaultSiteInfo.name,
    locale = 'en_US',
    alternateLocales = [],
    robots,
    verification,
    manifest,
    themeColor,
    colorScheme,
  } = options;

  const baseUrl = BASE_URL;
  const fullUrl = canonicalPath || path ? `${baseUrl}${canonicalPath || path}` : baseUrl;
  
  // Handle OG image
  let ogImageData;
  if (typeof ogImage === 'string') {
    ogImageData = [{
      url: ogImage.startsWith('http') ? ogImage : `${baseUrl}${ogImage}`,
      width: 1200,
      height: 630,
      alt: `${title} | ${siteName}`,
    }];
  } else if (ogImage && typeof ogImage === 'object') {
    ogImageData = [{
      url: ogImage.url.startsWith('http') ? ogImage.url : `${baseUrl}${ogImage.url}`,
      width: ogImage.width || 1200,
      height: ogImage.height || 630,
      alt: ogImage.alt || `${title} | ${siteName}`,
    }];
  } else {
    ogImageData = [{
      url: `${baseUrl}/api/og?title=${encodeURIComponent(title || '')}`,
      width: 1200,
      height: 630,
      alt: `${title} | ${siteName}`,
    }];
  }

  // Build robots configuration
  const robotsConfig = {
    index: !noIndex && (robots?.index !== false),
    follow: robots?.follow !== false,
    ...(robots?.noarchive && { noarchive: true }),
    ...(robots?.nosnippet && { nosnippet: true }),
    ...(robots?.noimageindex && { noimageindex: true }),
    ...(robots?.nocache && { nocache: true }),
    googleBot: {
      index: !noIndex && (robots?.index !== false),
      follow: robots?.follow !== false,
      'max-image-preview': 'large',
      'max-snippet': -1,
    },
  };

  const metadata: Metadata = {
    title,
    description,
    ...(keywords.length > 0 && { keywords: keywords.join(', ') }),
    robots: robotsConfig,
    openGraph: {
      title,
      description,
      type: ogType as any,
      url: fullUrl,
      images: ogImageData,
      siteName,
      locale,
      ...(alternateLocales.length > 0 && { alternateLocale: alternateLocales }),
    },
    twitter: {
      card: 'summary_large_image',
      title,
      description,
      images: ogImageData.map(img => img.url),
      creator: '@courseai',
    },
    alternates: {
      canonical: fullUrl,
    },
    ...(verification && { verification }),
    ...(manifest && { manifest }),
    ...(themeColor && { themeColor }),
    ...(colorScheme && { colorScheme }),
  };

  return metadata;
}

/**
 * Enhanced SEO Manager Hook for React components
 * Provides a convenient way to manage SEO in React components
 */
export function useSEOManager(options: OptimizedMetadataOptions & {
  enableStructuredData?: boolean;
  structuredDataType?: 'course' | 'quiz' | 'article' | 'faq';
  structuredDataProps?: any;
}) {
  const {
    enableStructuredData = true,
    structuredDataType,
    structuredDataProps,
    ...metadataOptions
  } = options;

  const metadata = React.useMemo(() => 
    generateOptimizedMetadata(metadataOptions),
    [metadataOptions]
  );

  const StructuredDataComponent = React.useMemo(() => {
    if (!enableStructuredData || !structuredDataType) return null;

    switch (structuredDataType) {
      case 'course':
        return <CourseSchema {...structuredDataProps} />;
      case 'quiz':
        return <QuizSchema {...structuredDataProps} />;
      case 'faq':
        return <FAQSchema {...structuredDataProps} />;
      default:
        return null;
    }
  }, [enableStructuredData, structuredDataType, structuredDataProps]);

  return {
    metadata,
    StructuredDataComponent,
  };
}

// ============================================================================
// EXPORT ALL OPTIMIZED COMPONENTS AND UTILITIES
// ============================================================================

// Re-export all existing exports to maintain compatibility
export {
  BASE_URL,
  defaultSiteInfo,
  defaultFAQItems,
  defaultSocialProfiles,
  defaultMetadata,
} from './config';

export {
  extractKeywords,
  generateMetaDescription,
  optimizeImageAlt,
  generateJsonLd,
  generateMetadata,
  getSocialImageUrl,
  createBreadcrumbItems,
  generateBreadcrumbs,
  createSocialProfiles,
  getQuizTypeLabel,
  generateSeoMetadata,
  generateCourseStructuredData,
  generateQuizStructuredData,
} from './helper-utils';

export * from './types';

// Export optimized components with original names for compatibility
export {
  JsonLD,
  WebsiteSchema,
  BreadcrumbListSchema,
  OrganizationSchema,
  FAQSchema,
  CourseSchema,
  QuizSchema,
  DefaultSEO,
};

// Export new optimized utilities
export {
  generateOptimizedMetadata,
  useSEOManager,
};

// Export optimized component types
export type {
  OptimizedWebsiteSchemaProps,
  OptimizedBreadcrumbListSchemaProps,
  OptimizedOrganizationSchemaProps,
  OptimizedCourseSchemaProps,
  OptimizedQuizSchemaProps,
  OptimizedDefaultSEOProps,
  OptimizedMetadataOptions,
};

